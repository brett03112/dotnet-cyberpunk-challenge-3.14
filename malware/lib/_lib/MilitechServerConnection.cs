using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using dotnet_cyberpunk_challenge_3_14.malware.lib._lib.interfaces;

/*
    NOTE: This file has been deprecated and is only here for reference!
    DO NOT CHANGE!
*/
namespace dotnet_cyberpunk_challenge_3_14.malware.lib._lib
{
    public class MilitechServerConnection
    {
        public string ConnectionId {get;set;}
        public string DestinationAddress {get;set;}
        public string SourceAddress {get;set;}
        public string ProcessId {get;set;}
        public string Content {get;set;}
        public string SecretKey {get;set;}
        private string DefaultDNSTarget = "8.8.8.8"; // Google

        public MilitechServerConnection() {
            _MakeSureWeCantUseThis();
        }

        /// <summary>
        /// Throws a NotImplementedException to ensure that this class is not used directly. Instead, a new
        /// class should be created that inherits from MilitechServerConnection and implements the abstract methods.
        /// </summary>
        protected virtual void _MakeSureWeCantUseThis() {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Initializes the Militech server connection. This involves:
        /// 1. Getting the destination address of the Militech server.
        /// 2. Getting the IP address of the current machine.
        /// 3. Getting a Militech secret key.
        /// 4. Sending a request to establish a connection to the Militech server.
        /// 5. Generating a new connection ID.
        /// 6. Generating a new process ID.
        /// </summary>
        /// public async virtual Task Initialize() {
            DestinationAddress = _GetDestinationAddress();
            SourceAddress = _GetCurrentSourceIpAddress();
            SecretKey = _GetMilitechSecretKey();

            await SendRequest("establish-connection");
            ConnectionId = Guid.NewGuid().ToString();
            ProcessId = _GetNewProcessId();
            Content = "";
        }

        /// <summary>
        /// Sends a request to the Militech server and returns the parsed response.
        /// This method will:
        /// 1. Generate the full path of the request by prepending the server type
        ///    to the provided path.
        /// 2. Call the <see cref="_SendRequest"/> method with the generated path.
        /// 3. Return the parsed response from the server.
        /// </summary>
        /// <param name="uriPath">The path to send the request to. This should not include the server type.</param>
        /// <returns>A parsed response from the server.</returns>
        /// public async Task<MilitechMessageRoot> SendRequest(string uriPath) {
            return await _SendRequest(uriPath);
        }

        /// <summary>
        /// Gets the destination address of the Militech server.
        /// This will first check the environment variable MILITECH_DESTINATION_SERVER
        /// and use that if it exists, otherwise it will use a default value.
        /// </summary>
        /// <returns>The destination address of the Militech server.</returns>
        /// protected string _GetDestinationAddress() {
            string defaultMilitechDestination = "https://my.api.mockaroo.com";
            string militech_destination_envvar = Environment.GetEnvironmentVariable("MILITECH_DESTINATION_SERVER");
            
            if (militech_destination_envvar != null && militech_destination_envvar != ""){
                return militech_destination_envvar;
            } else {
                return defaultMilitechDestination;
            }
        }

        /// <summary>
        /// Sends a request to the Militech server and returns the parsed response.
        /// This method will:
        /// 1. Create a new instance of <see cref="HttpClient"/> with the destination address.
        /// 2. Clear the default request headers and add the user agent and API key.
        /// 3. Send a GET request to the specified path.
        /// 4. Ensure the response was successful.
        /// 5. Write the request to the console.
        /// 6. Read the response as a string.
        /// 7. Parse the response as an <see cref="MilitechMessageRoot"/>.
        /// 8. Return the parsed response.
        /// </summary>
        /// <param name="uriPath">The path to send the request to. This should not include the domain name.</param>
        /// <returns>A parsed response from the Militech server.</returns>
        /// protected async Task<MilitechMessageRoot> _SendRequest(string uriPath){
            HttpClient client = new HttpClient() {
                BaseAddress = new Uri(DestinationAddress),
                Timeout = TimeSpan.FromSeconds(20)
            };
            
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Add("User-Agent", "Militech ICE Breaker");
            client.DefaultRequestHeaders.Add("X-API-Key", SecretKey);
            using HttpResponseMessage response = await client.GetAsync($"militech/{uriPath}");
            response.EnsureSuccessStatusCode()
                .WriteRequestToConsole();
            
            var jsonResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"{jsonResponse}\n");
            MilitechMessageRoot parsedMilitechResponse = jsonResponse.ToMilitechMessage();
            
            return parsedMilitechResponse;
    


        }
    }

    public class IceBreakerMilitechTunnelConnection : MilitechServerConnection, ITunnelConnection
    {
        public EncryptionType TunnelEncryption {get;set;}
        public bool IsEncrypted {get;set;}

        /// <summary>
        /// Initializes the ICE breaker tunnel connection to the Militech server. This involves:
        /// 1. Getting the destination address of the Militech server.
        /// 2. Getting the IP address of the current machine.
        /// 3. Getting a Militech secret key.
        /// 4. Sending a request to establish a connection to the Militech server.
        /// 5. Generating a new connection ID.
        /// 6. Generating a new process ID.
        /// </summary>
        /// <remarks>
        /// This method will also set the <see cref="IsEncrypted"/> and <see cref="TunnelEncryption"/>
        /// properties to true and SSL respectively.
        /// </remarks>
        /// public override async Task Initialize() {
            DestinationAddress = _GetDestinationAddress();
            SourceAddress = _GetCurrentSourceIpAddress();
            SecretKey = _GetMilitechSecretKey();
            await SendRequest("establish-connection");
            ConnectionId = Guid.NewGuid().ToString();
            ProcessId = _GetNewProcessId();
            Content = "";
            IsEncrypted = true;
            TunnelEncryption = EncryptionType.SSL;

        }
    }
}
/******  f95b0361-a663-4259-94fc-bd3e18b3542a  *******/