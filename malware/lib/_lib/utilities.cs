using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using dotnet_cyberpunk_challenge_3_14.malware.lib._lib;

namespace dotnet_cyberpunk_challenge_3_14.malware.lib
{
    public enum EncryptionType {
        SSL = 0,
        CLEAR_TEXT = 1,

    }

    public class KnownIceTypes {
        public const string HITACHI = "0x98ad4321";
        public const string HOSAKA = "0x43ce4691";
        public const string KIROSHI = "0x02ace587";
        public const string UNKNOWN = "unknown"; 
    }

    static class HttpResponseMessageExtensions
    {
        /// <summary>
        /// Writes the request information of the given HTTP response to the console in the format:
        /// <code>
        /// [HTTP Method] [Request URI] HTTP/[HTTP Version]
        /// </code>
        /// </summary>
        /// <param name="response">The HTTP response containing the request to be written to the console.</param>
        internal static void WriteRequestToConsole(this HttpResponseMessage response)
        {
            if (response is null)
            {
                return;
            }

            var request = response.RequestMessage;
            Console.Write($"{request?.Method} ");
            Console.Write($"{request?.RequestUri} ");
            Console.WriteLine($"HTTP/{request?.Version}");        
        }
    }

    static class Helpers {
        /// <summary>
        /// Converts a given JSON string into a Dictionary of key-value pairs of strings.
        /// </summary>
        /// <param name="json">The JSON string to be converted.</param>
        /// <returns>A dictionary of key-value pairs of strings.</returns>
        public static Dictionary<string,string> JsonToDictionary(this string json) {
            Dictionary<string, object>? objectValues = JsonSerializer.Deserialize<Dictionary<string, object>>(json);

            IEnumerable<KeyValuePair<string, string>> stringValues = objectValues.Select(o => new KeyValuePair<string, string>(o.Key, o.Value?.ToString()));
            return stringValues.ToDictionary(pair => pair.Key, pair => pair.Value);
        }

        /// <summary>
        /// Converts a given JSON string into an <see cref="ArasakaMessageRoot"/>.
        /// </summary>
        /// <param name="json">The JSON string to be converted.</param>
        /// <returns>An <see cref="ArasakaMessageRoot"/>.</returns>
        public static ArasakaMessageRoot ToArasakaMessage(this string json){
            ArasakaMessageRoot message = JsonSerializer.Deserialize<ArasakaMessageRoot>(json);
            return message;
        }

        /// <summary>
        /// Converts a given JSON string into a <see cref="MilitechMessageRoot"/>.
        /// </summary>
        /// <param name="json">The JSON string to be converted.</param>
        /// <returns>A <see cref="MilitechMessageRoot"/>.</returns>
        public static MilitechMessageRoot ToMilitechMessage(this string json){
            MilitechMessageRoot message = JsonSerializer.Deserialize<MilitechMessageRoot>(json);
            return message;
        }

        /// <summary>
        /// Converts a given JSON string into a <see cref="BiotechnicaMessageRoot"/>.
        /// </summary>
        /// <param name="json">The JSON string to be converted.</param>
        /// <returns>A <see cref="BiotechnicaMessageRoot"/>.</returns>
        public static BiotechnicaMessageRoot ToBiotechnicaMessage(this string json){
            BiotechnicaMessageRoot message = JsonSerializer.Deserialize<BiotechnicaMessageRoot>(json);
            return message;
        }
    }

}